/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SymbolRestClient.Client.OpenAPIDateConverter;

namespace SymbolRestClient.Model
{
    /// <summary>
    /// MultisigDTO
    /// </summary>
    [DataContract(Name = "MultisigDTO")]
    public partial class MultisigDTO : IEquatable<MultisigDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MultisigDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MultisigDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MultisigDTO" /> class.
        /// </summary>
        /// <param name="version">The version of the state (required).</param>
        /// <param name="accountAddress">Address encoded using a 32-character set. (required).</param>
        /// <param name="minApproval">A number that allows uint 32 values. (required).</param>
        /// <param name="minRemoval">A number that allows uint 32 values. (required).</param>
        /// <param name="cosignatoryAddresses">Addresses of the cosignatory accounts. (required).</param>
        /// <param name="multisigAddresses">Multisig accounts where the account is cosignatory. (required).</param>
        public MultisigDTO(int version = default(int), string accountAddress = default(string), long minApproval = default(long), long minRemoval = default(long), List<string> cosignatoryAddresses = default(List<string>), List<string> multisigAddresses = default(List<string>))
        {
            this._Version = version;
            // to ensure "accountAddress" is required (not null)
            if (accountAddress == null)
            {
                throw new ArgumentNullException("accountAddress is a required property for MultisigDTO and cannot be null");
            }
            this.AccountAddress = accountAddress;
            this.MinApproval = minApproval;
            this.MinRemoval = minRemoval;
            // to ensure "cosignatoryAddresses" is required (not null)
            if (cosignatoryAddresses == null)
            {
                throw new ArgumentNullException("cosignatoryAddresses is a required property for MultisigDTO and cannot be null");
            }
            this.CosignatoryAddresses = cosignatoryAddresses;
            // to ensure "multisigAddresses" is required (not null)
            if (multisigAddresses == null)
            {
                throw new ArgumentNullException("multisigAddresses is a required property for MultisigDTO and cannot be null");
            }
            this.MultisigAddresses = multisigAddresses;
        }

        /// <summary>
        /// The version of the state
        /// </summary>
        /// <value>The version of the state</value>
        /// <example>1</example>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = true)]
        public int _Version { get; set; }

        /// <summary>
        /// Address encoded using a 32-character set.
        /// </summary>
        /// <value>Address encoded using a 32-character set.</value>
        /// <example>&quot;TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY&quot;</example>
        [DataMember(Name = "accountAddress", IsRequired = true, EmitDefaultValue = true)]
        public string AccountAddress { get; set; }

        /// <summary>
        /// A number that allows uint 32 values.
        /// </summary>
        /// <value>A number that allows uint 32 values.</value>
        /// <example>2222212828</example>
        [DataMember(Name = "minApproval", IsRequired = true, EmitDefaultValue = true)]
        public long MinApproval { get; set; }

        /// <summary>
        /// A number that allows uint 32 values.
        /// </summary>
        /// <value>A number that allows uint 32 values.</value>
        /// <example>2222212828</example>
        [DataMember(Name = "minRemoval", IsRequired = true, EmitDefaultValue = true)]
        public long MinRemoval { get; set; }

        /// <summary>
        /// Addresses of the cosignatory accounts.
        /// </summary>
        /// <value>Addresses of the cosignatory accounts.</value>
        [DataMember(Name = "cosignatoryAddresses", IsRequired = true, EmitDefaultValue = true)]
        public List<string> CosignatoryAddresses { get; set; }

        /// <summary>
        /// Multisig accounts where the account is cosignatory.
        /// </summary>
        /// <value>Multisig accounts where the account is cosignatory.</value>
        [DataMember(Name = "multisigAddresses", IsRequired = true, EmitDefaultValue = true)]
        public List<string> MultisigAddresses { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MultisigDTO {\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("  AccountAddress: ").Append(AccountAddress).Append("\n");
            sb.Append("  MinApproval: ").Append(MinApproval).Append("\n");
            sb.Append("  MinRemoval: ").Append(MinRemoval).Append("\n");
            sb.Append("  CosignatoryAddresses: ").Append(CosignatoryAddresses).Append("\n");
            sb.Append("  MultisigAddresses: ").Append(MultisigAddresses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MultisigDTO);
        }

        /// <summary>
        /// Returns true if MultisigDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of MultisigDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MultisigDTO input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this._Version == input._Version ||
                    this._Version.Equals(input._Version)
                ) && 
                (
                    this.AccountAddress == input.AccountAddress ||
                    (this.AccountAddress != null &&
                    this.AccountAddress.Equals(input.AccountAddress))
                ) && 
                (
                    this.MinApproval == input.MinApproval ||
                    this.MinApproval.Equals(input.MinApproval)
                ) && 
                (
                    this.MinRemoval == input.MinRemoval ||
                    this.MinRemoval.Equals(input.MinRemoval)
                ) && 
                (
                    this.CosignatoryAddresses == input.CosignatoryAddresses ||
                    this.CosignatoryAddresses != null &&
                    input.CosignatoryAddresses != null &&
                    this.CosignatoryAddresses.SequenceEqual(input.CosignatoryAddresses)
                ) && 
                (
                    this.MultisigAddresses == input.MultisigAddresses ||
                    this.MultisigAddresses != null &&
                    input.MultisigAddresses != null &&
                    this.MultisigAddresses.SequenceEqual(input.MultisigAddresses)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this._Version.GetHashCode();
                if (this.AccountAddress != null)
                {
                    hashCode = (hashCode * 59) + this.AccountAddress.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MinApproval.GetHashCode();
                hashCode = (hashCode * 59) + this.MinRemoval.GetHashCode();
                if (this.CosignatoryAddresses != null)
                {
                    hashCode = (hashCode * 59) + this.CosignatoryAddresses.GetHashCode();
                }
                if (this.MultisigAddresses != null)
                {
                    hashCode = (hashCode * 59) + this.MultisigAddresses.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
